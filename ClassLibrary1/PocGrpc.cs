// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Poc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace GPWSPOC  {
  public static partial class PocGp
  {
    static readonly string __ServiceName = "PocGp";

    static readonly grpc::Marshaller<global::NameRequest> __Marshaller_NameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NameResponse> __Marshaller_NameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NameResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::IntRequest> __Marshaller_IntRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::IntRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::IntResponse> __Marshaller_IntResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::IntResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NameRequest, global::NameResponse> __Method_Hello = new grpc::Method<global::NameRequest, global::NameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hello",
        __Marshaller_NameRequest,
        __Marshaller_NameResponse);

    static readonly grpc::Method<global::IntRequest, global::IntResponse> __Method_AddingTen = new grpc::Method<global::IntRequest, global::IntResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddingTen",
        __Marshaller_IntRequest,
        __Marshaller_IntResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PocReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PocGp</summary>
    public abstract partial class PocGpBase
    {
      public virtual global::System.Threading.Tasks.Task<global::NameResponse> Hello(global::NameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::IntResponse> AddingTen(global::IntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PocGp</summary>
    public partial class PocGpClient : grpc::ClientBase<PocGpClient>
    {
      /// <summary>Creates a new client for PocGp</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PocGpClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PocGp that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PocGpClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PocGpClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PocGpClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::NameResponse Hello(global::NameRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Hello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NameResponse Hello(global::NameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NameResponse> HelloAsync(global::NameRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NameResponse> HelloAsync(global::NameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual global::IntResponse AddingTen(global::IntRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddingTen(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::IntResponse AddingTen(global::IntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddingTen, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::IntResponse> AddingTenAsync(global::IntRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddingTenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::IntResponse> AddingTenAsync(global::IntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddingTen, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PocGpClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PocGpClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PocGpBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Hello, serviceImpl.Hello)
          .AddMethod(__Method_AddingTen, serviceImpl.AddingTen).Build();
    }

  }
}
#endregion
